testing(List)

{-
drop, index and take are implemented natively but we
can still write tests for them
-}

#append
	[] [] shouldReturn []
	[1] [] shouldReturn [1]
	[] [1] shouldReturn [1]
	[1] [2] shouldReturn [1,2]
	[[]] [[]] shouldReturn [[],[]]

#map
	id [] shouldReturn []
	(\x -> x + 1) [1,2] shouldReturn [2,3]
	length [[1,2],[]] shouldReturn [2,0]

#$index
	[] 0 shouldFailWith "(!!) called on an empty list!"
	[1] (-1) shouldFailWith "(!!) called with a negative index!"
	[1] 0 shouldReturn 1
	[4,5,6] 2 shouldReturn 6

#drop
	(-1) [] shouldFailWith "drop called with a negative amount!"
	3 [1,2] shouldFailWith "tried to drop too much from a list!"
	0 [] shouldReturn []
	1 [1,2] shouldReturn [2]

#take
	(-1) [1,2] shouldFailWith "take called with a negative amount!"
	3 [1,2] shouldFailWith "tried to take too much from a list!"
	0 [] shouldReturn []
	1 [[],[]] shouldReturn [[]]

#tail
	[] shouldFailWith "tail called on an empty list!"
	[1,2,3] shouldReturn [2,3]
	[[],[]] shouldReturn [[]]

#head
	[] shouldFailWith "tried to get head of an empty list!"
	[1,2] shouldReturn 1
	[[],[]] shouldReturn []

#isEmpty
	[] shouldReturn True
	[1,2] shouldReturn False

#filter
	(\x -> x > 2) [] shouldReturn []
	(\x -> x > 2) [3,1,4,0] shouldReturn [3,4]

#filter2D
	(\x -> x > 2) [] shouldReturn []
	(\x -> x > 2) [[1]] shouldReturn [[]]
	(\x -> x > 2) [[1,3,0],[0,2,4]] shouldReturn [[3],[4]]

#map2D
	length [] shouldReturn []
	length [[[]]] shouldReturn [[0]]
	(\x -> x * 2) [[1,2],[3,4]] shouldReturn [[2,4],[6,8]]

#replace
	[] 0 'a' shouldFailWith "replace called on an empty list!"
	['a'] (-1) 'a' shouldFailWith "replace called with a negative index!"
	['a','b'] 0 'c' shouldReturn ['c','b']
	['a','b','c'] 2 'x' shouldReturn ['a','b','x']
	['a','b','c'] 1 'x' shouldReturn ['a','x','c']

#replace2D
	[] 0 0 'x' shouldFailWith "replace2D called with an empty matrix!"
	[[]] 0 0 'x' shouldFailWith "illegal x index in replace2D, too large!"
	[['a']] 1 0 'x' shouldFailWith "illegal y index in replace2D, too large!"
	[['a']] 0 1 'x' shouldFailWith "illegal x index in replace2D, too large!"
	[['a']] (-1) 0 'x' shouldFailWith "replace2D called with a negative index!"
	[['a']] 0 (-1) 'x' shouldFailWith "replace2D called with a negative index!"
	[['a']] 0 0 'x' shouldReturn [['x']]
	[['a','b'],['c','d']] 1 0 'x' shouldReturn [['a','b'],['x','d']]

#index2D
	[] 0 0 shouldFailWith "index2D called with an empty matrix!"
	[[]] 0 0 shouldFailWith "illegal x index in index2D, too large!"
	[['a']] 1 0 shouldFailWith "illegal y index in index2D, too large!"
	[['a']] 0 1 shouldFailWith "illegal x index in index2D, too large!"
	[['a']] (-1) 0 shouldFailWith "index2D called with a negative index!"
	[['a']] 0 (-1) shouldFailWith "index2D called with a negative index!"
	[['a']] 0 0 shouldReturn 'a'
	[['a','b'],['c','d']] 1 0 shouldReturn 'c'

#reduce
	(+) [] shouldFailWith "reduce called on an empty list!"
	(+) [1] shouldReturn 1
	(+) [1,2,3] shouldReturn 6

#length
	[] shouldReturn 0
	[1,2] shouldReturn 2
	[[],[]] shouldReturn 2

#and
	[] shouldReturn True
	[False] shouldReturn False
	[True, True] shouldReturn True
	[True, False, True] shouldReturn False

#or
	[] shouldReturn False
	[False] shouldReturn False
	[True, False] shouldReturn True
	[True, False, False] shouldReturn True

#allSame
	[] shouldReturn True
	[1,1] shouldReturn True
	[1,1,3,1] shouldReturn False

#concat
	[] shouldReturn []
	[[]] shouldReturn []
	[[],[]] shouldReturn []
	[[1,2],[3,4]] shouldReturn [1,2,3,4]

#replicate
	(-1) 'a' shouldFailWith "replicate called with a negative amount!"
	0 'a' shouldReturn []
	2 'a' shouldReturn ['a','a']

#replicateGrid
	(-1) 'a' shouldFailWith "replicate called with a negative amount!"
	0 'a' shouldReturn []
	2 'a' shouldReturn [['a','a'],['a','a']]
